{"ast":null,"code":"var _jsxFileName = \"/home/lucas/Documents/Applications/costs/src/components/project/ProjectForm.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Input } from \"../form/Input\";\nimport { Select } from \"../form/Select\";\nimport { SubmitButton } from \"../form/SubmitButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProjectForm = _ref => {\n  _s();\n\n  let {\n    btnText,\n    handleSubmit,\n    projectData\n  } = _ref;\n  // o useState foi usado para pegar os dados da api, e setar em categories\n  const [categories, setCategories] = useState([]);\n  const [project, setProject] = useState(projectData || {});\n  /* o useEffect, corrigi o problema de várias requests sendo enviadas,\n      e renderiza uma única vez por load */\n\n  useEffect(() => {\n    fetch('http://localhost:5000/categories', {\n      method: 'get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(data => setCategories(data)).catch(e => console.log(e));\n  }, []);\n\n  const submit = event => {\n    event.preventDefault();\n    handleSubmit(project);\n  };\n\n  const handleChange = _ref2 => {\n    let {\n      target\n    } = _ref2;\n    setProject({ ...project,\n      [target.name]: target.value\n    });\n  };\n\n  const handleCategory = event => {\n    setProject({ ...project,\n      category: {\n        id: event.target.value,\n        name: event.target.options[event.target.selectedIndex].text\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      text: \"Nome do projeto\",\n      name: \"name\",\n      handleOnChange: handleChange,\n      placeholder: \"Insira o nome do projeto\",\n      value: project.name ? project.name : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"number\",\n      text: \"Or\\xE7amento do projeto\",\n      name: \"budget\",\n      handleOnChange: handleChange,\n      placeholder: \"Insira o or\\xE7amento total\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      name: \"category_id\",\n      text: \"Selecione a categoria\",\n      handleOnChange: handleCategory,\n      options: categories,\n      value: project.category ? project.category.id : '' // se tiver categoria setar com id categoria, se não matém vazio\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n      text: btnText // insere dinamicamente o nome do botão\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ProjectForm, \"HqwHAWR72GT/iPVMwQAus0G0i+Y=\");\n\n_c = ProjectForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectForm\");","map":{"version":3,"sources":["/home/lucas/Documents/Applications/costs/src/components/project/ProjectForm.js"],"names":["useEffect","useState","Input","Select","SubmitButton","ProjectForm","btnText","handleSubmit","projectData","categories","setCategories","project","setProject","fetch","method","headers","then","res","json","data","catch","e","console","log","submit","event","preventDefault","handleChange","target","name","value","handleCategory","category","id","options","selectedIndex","text"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { Input } from \"../form/Input\"\nimport { Select } from \"../form/Select\"\nimport { SubmitButton } from \"../form/SubmitButton\"\n\nexport const ProjectForm = ({ \n    btnText,\n    handleSubmit,\n    projectData\n    }) => {\n    // o useState foi usado para pegar os dados da api, e setar em categories\n    const [categories, setCategories] = useState([])\n    const [project, setProject] = useState(projectData || {})\n\n    /* o useEffect, corrigi o problema de várias requests sendo enviadas,\n        e renderiza uma única vez por load */\n    useEffect(() => {\n        fetch('http://localhost:5000/categories', {\n            method: 'get',\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then((res) => res.json())\n            .then((data) => setCategories(data))\n            .catch((e) => console.log(e))\n    }, [])\n\n    const submit = (event) => {\n        event.preventDefault()\n        handleSubmit(project)\n    }\n\n    const handleChange = ({ target }) => {\n        setProject({ ...project, [target.name]: target.value})\n    }\n\n    const handleCategory = (event) => {\n        setProject({ ...project, category: {\n            id: event.target.value,\n            name: event.target.options[event.target.selectedIndex].text\n        }})\n    }\n\n    return (\n        <form onSubmit={submit}>\n            <Input \n                type='text'\n                text='Nome do projeto'\n                name='name'\n                handleOnChange={handleChange}\n                placeholder='Insira o nome do projeto'\n                value={project.name ? project.name : ''}\n            />\n            <Input \n                type='number' \n                text='Orçamento do projeto'\n                name='budget'\n                handleOnChange={handleChange}\n                placeholder='Insira o orçamento total' \n            />\n            <Select \n                name='category_id'\n                text='Selecione a categoria'\n                handleOnChange={handleCategory}\n                options={categories}\n                value={project.category ? project.category.id : ''} // se tiver categoria setar com id categoria, se não matém vazio\n            />\n            <SubmitButton  \n                text={btnText} // insere dinamicamente o nome do botão\n            />\n        </form>\n    )\n}"]},"metadata":{},"sourceType":"module"}